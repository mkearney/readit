// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// readcpp
std::string readcpp(const std::string& path);
RcppExport SEXP _readthat_readcpp(SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type path(pathSEXP);
    rcpp_result_gen = Rcpp::wrap(readcpp(path));
    return rcpp_result_gen;
END_RCPP
}
// readlcpp
std::vector<std::string> readlcpp(std::string filename, const int first, const int last);
RcppExport SEXP _readthat_readlcpp(SEXP filenameSEXP, SEXP firstSEXP, SEXP lastSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< const int >::type first(firstSEXP);
    Rcpp::traits::input_parameter< const int >::type last(lastSEXP);
    rcpp_result_gen = Rcpp::wrap(readlcpp(filename, first, last));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_readthat_readcpp", (DL_FUNC) &_readthat_readcpp, 1},
    {"_readthat_readlcpp", (DL_FUNC) &_readthat_readlcpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_readthat(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
